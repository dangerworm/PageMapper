#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PageMapper
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PageMapper")]
	public partial class PageMapperDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertNode(Node instance);
    partial void UpdateNode(Node instance);
    partial void DeleteNode(Node instance);
    partial void InsertPageMap(PageMap instance);
    partial void UpdatePageMap(PageMap instance);
    partial void DeletePageMap(PageMap instance);
    #endregion
		
		public PageMapperDataContext() : 
				base(global::PageMapper.Properties.Settings.Default.PageMapperConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PageMapperDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PageMapperDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PageMapperDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PageMapperDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Node> Nodes
		{
			get
			{
				return this.GetTable<Node>();
			}
		}
		
		public System.Data.Linq.Table<PageMap> PageMaps
		{
			get
			{
				return this.GetTable<PageMap>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Nodes")]
	public partial class Node : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PageMapID;
		
		private int _NodeIndex;
		
		private string _NodeName;
		
		private string _NodeID;
		
		private string _NodeClass;
		
		private EntityRef<PageMap> _PageMap;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPageMapIDChanging(System.Guid value);
    partial void OnPageMapIDChanged();
    partial void OnNodeIndexChanging(int value);
    partial void OnNodeIndexChanged();
    partial void OnNodeNameChanging(string value);
    partial void OnNodeNameChanged();
    partial void OnNodeIDChanging(string value);
    partial void OnNodeIDChanged();
    partial void OnNodeClassChanging(string value);
    partial void OnNodeClassChanged();
    #endregion
		
		public Node()
		{
			this._PageMap = default(EntityRef<PageMap>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageMapID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PageMapID
		{
			get
			{
				return this._PageMapID;
			}
			set
			{
				if ((this._PageMapID != value))
				{
					if (this._PageMap.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPageMapIDChanging(value);
					this.SendPropertyChanging();
					this._PageMapID = value;
					this.SendPropertyChanged("PageMapID");
					this.OnPageMapIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeIndex", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NodeIndex
		{
			get
			{
				return this._NodeIndex;
			}
			set
			{
				if ((this._NodeIndex != value))
				{
					this.OnNodeIndexChanging(value);
					this.SendPropertyChanging();
					this._NodeIndex = value;
					this.SendPropertyChanged("NodeIndex");
					this.OnNodeIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string NodeName
		{
			get
			{
				return this._NodeName;
			}
			set
			{
				if ((this._NodeName != value))
				{
					this.OnNodeNameChanging(value);
					this.SendPropertyChanging();
					this._NodeName = value;
					this.SendPropertyChanged("NodeName");
					this.OnNodeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeID", DbType="VarChar(MAX)")]
		public string NodeID
		{
			get
			{
				return this._NodeID;
			}
			set
			{
				if ((this._NodeID != value))
				{
					this.OnNodeIDChanging(value);
					this.SendPropertyChanging();
					this._NodeID = value;
					this.SendPropertyChanged("NodeID");
					this.OnNodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeClass", DbType="VarChar(MAX)")]
		public string NodeClass
		{
			get
			{
				return this._NodeClass;
			}
			set
			{
				if ((this._NodeClass != value))
				{
					this.OnNodeClassChanging(value);
					this.SendPropertyChanging();
					this._NodeClass = value;
					this.SendPropertyChanged("NodeClass");
					this.OnNodeClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PageMap_Node", Storage="_PageMap", ThisKey="PageMapID", OtherKey="PageMapID", IsForeignKey=true)]
		public PageMap PageMap
		{
			get
			{
				return this._PageMap.Entity;
			}
			set
			{
				PageMap previousValue = this._PageMap.Entity;
				if (((previousValue != value) 
							|| (this._PageMap.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PageMap.Entity = null;
						previousValue.Nodes.Remove(this);
					}
					this._PageMap.Entity = value;
					if ((value != null))
					{
						value.Nodes.Add(this);
						this._PageMapID = value.PageMapID;
					}
					else
					{
						this._PageMapID = default(System.Guid);
					}
					this.SendPropertyChanged("PageMap");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PageMaps")]
	public partial class PageMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PageMapID;
		
		private string _Name;
		
		private string _BaseURL;
		
		private EntitySet<Node> _Nodes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPageMapIDChanging(System.Guid value);
    partial void OnPageMapIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBaseURLChanging(string value);
    partial void OnBaseURLChanged();
    #endregion
		
		public PageMap()
		{
			this._Nodes = new EntitySet<Node>(new Action<Node>(this.attach_Nodes), new Action<Node>(this.detach_Nodes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageMapID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PageMapID
		{
			get
			{
				return this._PageMapID;
			}
			set
			{
				if ((this._PageMapID != value))
				{
					this.OnPageMapIDChanging(value);
					this.SendPropertyChanging();
					this._PageMapID = value;
					this.SendPropertyChanged("PageMapID");
					this.OnPageMapIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseURL", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string BaseURL
		{
			get
			{
				return this._BaseURL;
			}
			set
			{
				if ((this._BaseURL != value))
				{
					this.OnBaseURLChanging(value);
					this.SendPropertyChanging();
					this._BaseURL = value;
					this.SendPropertyChanged("BaseURL");
					this.OnBaseURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PageMap_Node", Storage="_Nodes", ThisKey="PageMapID", OtherKey="PageMapID")]
		public EntitySet<Node> Nodes
		{
			get
			{
				return this._Nodes;
			}
			set
			{
				this._Nodes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Nodes(Node entity)
		{
			this.SendPropertyChanging();
			entity.PageMap = this;
		}
		
		private void detach_Nodes(Node entity)
		{
			this.SendPropertyChanging();
			entity.PageMap = null;
		}
	}
}
#pragma warning restore 1591
